{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EggEngine A framework/library written with and for Python. Features EggEngine comes with 7 Python modules ready to use! data debug encrypt files image module turtl ui (experimental) Setup This will install Python modules (or dependencies) that are required to allow all features of EggEngine to work as intended. Create a new Python file, you can name it anything you want. Copy the folder EggEngine into the same diredctory. In the Python file, add the following line: from EggEngine import module Or (not recommended) alternative: import EggEngine.module Next, add these line: module.dependencies() If you used the alternative, add this line: EggEngine.module.dependencies() You're ready to use EggEngine! Quick start Obviously, the first step would be to download the repository or from the latest release. Then, follow these steps: Copy the folder EggEngine into your project folder. In your Python file(s), add the following line: from EggEngine import <module you want to use> For example, if I want to use the data module from EggEngine , I would add this line of code: from EggEngine import data When calling functions, this is what it would look like: data.function() Another (not recommended) alternative: import EggEngine.<module you want to use> Following my example from earlier, this is what it would look like: import EggEngine.data The downside to this import statement is when calling functions, you must type out the parent module, then the module, and finally the function like this: EggEngine.data.function() Now you're ready to start using EggEngine in your project!","title":"Home"},{"location":"#eggengine","text":"A framework/library written with and for Python.","title":"EggEngine"},{"location":"#features","text":"EggEngine comes with 7 Python modules ready to use! data debug encrypt files image module turtl ui (experimental)","title":"Features"},{"location":"#setup","text":"This will install Python modules (or dependencies) that are required to allow all features of EggEngine to work as intended. Create a new Python file, you can name it anything you want. Copy the folder EggEngine into the same diredctory. In the Python file, add the following line: from EggEngine import module Or (not recommended) alternative: import EggEngine.module Next, add these line: module.dependencies() If you used the alternative, add this line: EggEngine.module.dependencies() You're ready to use EggEngine!","title":"Setup"},{"location":"#quick-start","text":"Obviously, the first step would be to download the repository or from the latest release. Then, follow these steps: Copy the folder EggEngine into your project folder. In your Python file(s), add the following line: from EggEngine import <module you want to use> For example, if I want to use the data module from EggEngine , I would add this line of code: from EggEngine import data When calling functions, this is what it would look like: data.function() Another (not recommended) alternative: import EggEngine.<module you want to use> Following my example from earlier, this is what it would look like: import EggEngine.data The downside to this import statement is when calling functions, you must type out the parent module, then the module, and finally the function like this: EggEngine.data.function() Now you're ready to start using EggEngine in your project!","title":"Quick start"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2023 eggnaut Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"about/","text":"","title":"About"},{"location":"data/","text":"Usage from EggEngine import data # or import EggEngine.data Includes many useful functions related to data and data storage within Python, mainly lists and 2D lists (arrays). Made by @eggnaut Sort Sorts any Python list using the selection sort algorithm. Syntax sort(target) Args target (list): any list with any values that needs to be sorted. Returns new (list): the same items as the orginal list, but sorted using the selection sort algorithm. generateList Generates a prefilled Python list with random integer items. Syntax generateList(length, startVal, endVal) Args length (int): how many items in the list startVal (int): the start point for the range of random integers endVal (int): the end point for the range of random int Returns new (list): a list with random integer items. generateArray Generates a prefilled 2D Python list (array) with random integer items. Syntax generateArray(rows, cols, startVal, endVal) Args rows (int): how many rows (lists) you want in the array cols (int): how many columns (items) you want in each row (list) startVal (int): the start point for the range of random integers endVal (int): the end point for the range of random integers Returns new (list): a 2D Python list (array) with random integer items. loopArray Loops through a 2D Python list (array) and finds all items in it. Syntax loopArray(array) Args array (list): the 2D Python list (array) which the function will search through Returns cells (list): a list filled with tuples as items. Each tuple follows this format: row (list) index, cell (item) index, cell (item's value) findCell Gives the exact coordinates of an item within a 2D Python list (array) in the form of a row index and column index. Syntax findCell(array, cell) Args array (list): any 2D Python list (array) that contains items with any type of value. cell (any): the item you are looking for within the array Returns coordinate: the position of the cell within the array as (row index, column index)","title":"Data"},{"location":"data/#usage","text":"from EggEngine import data # or import EggEngine.data Includes many useful functions related to data and data storage within Python, mainly lists and 2D lists (arrays). Made by @eggnaut","title":"Usage"},{"location":"data/#sort","text":"Sorts any Python list using the selection sort algorithm. Syntax sort(target) Args target (list): any list with any values that needs to be sorted. Returns new (list): the same items as the orginal list, but sorted using the selection sort algorithm.","title":"Sort"},{"location":"data/#generatelist","text":"Generates a prefilled Python list with random integer items. Syntax generateList(length, startVal, endVal) Args length (int): how many items in the list startVal (int): the start point for the range of random integers endVal (int): the end point for the range of random int Returns new (list): a list with random integer items.","title":"generateList"},{"location":"data/#generatearray","text":"Generates a prefilled 2D Python list (array) with random integer items. Syntax generateArray(rows, cols, startVal, endVal) Args rows (int): how many rows (lists) you want in the array cols (int): how many columns (items) you want in each row (list) startVal (int): the start point for the range of random integers endVal (int): the end point for the range of random integers Returns new (list): a 2D Python list (array) with random integer items.","title":"generateArray"},{"location":"data/#looparray","text":"Loops through a 2D Python list (array) and finds all items in it. Syntax loopArray(array) Args array (list): the 2D Python list (array) which the function will search through Returns cells (list): a list filled with tuples as items. Each tuple follows this format: row (list) index, cell (item) index, cell (item's value)","title":"loopArray"},{"location":"data/#findcell","text":"Gives the exact coordinates of an item within a 2D Python list (array) in the form of a row index and column index. Syntax findCell(array, cell) Args array (list): any 2D Python list (array) that contains items with any type of value. cell (any): the item you are looking for within the array Returns coordinate: the position of the cell within the array as (row index, column index)","title":"findCell"}]}